###first check wheather the repository exist or not: git status____________________________________
1.git init----------This command is used to create a repository
2.git add --a -------This command is used to track files
3.git status --------this command is used to check the status of a our repository
4.git add (modified file name)----this command adds the modified file to a staged
4.git rm -rf .git ------this command is used to delete a repository



###commit : git commit -m 'message'_______________________________________________________________
{

>>>>git log -------this command is used to see all the commit 
>>> git commit -m 'message'--------
>>>>In Git, a "commit" is like taking a picture of your project at a specific moment. It captures all the changes you've made to your files since the last picture (commit). Each commit has a unique ID and a message describing what you changed. It's like saving your progress in a video gameâ€”you can always go back to a previous commit if you need to.
-------
}



##UNTRACKING CERTAIN FILE:::{____________________________________________________________________
if there is certain file that you dont want to keep track that means even if it is changed it shouldnot be  consider as modified . you can do it in a following ways:
1:touch .gitignore------this will create a file name .gitignore
2:the file which you dont want to keep track wite its name and type inside .gitignore and save it 
3:git add --a ---------addd .gitignore to track
4:git add -m "what changes have you done write it and "------commit it
5:(write *log  )--------if you want to ignore all the .log files 
6:git by default ignores the empty folders
7:(/dir/)----it is used to ignore only outer dir if there is dir iniside dir inside dir will be tracked
}


##comparing dir with staged::{________________________________________________________________
1:git diff------- compares working directory with the staging area
2:git diff --staged---it compares staging area with  previous commit

}

###skiping the staging area________________________________________________________________________  
{
git commit -a -m 'commitmessage' -----this command skips the staging area and directly commit the changes
                                  -------however it doesnt commit the untracked file


}

#####moving and renaming git {________________________________________________________________________________________________

git rm filename -----this removes (deletes) the file
git rm -f filename-----This is used to forcly remove (delete) file
git mv current_file_name new_name------the command in used to rename 


}

####untracking tracked fil{________________________________________________________________________

git rm --cached (file_name)-----this command is used to  untrack a file that has been tracking till now
                         -----now even if you make changes it wont affect because it hass been already untracked

}

###cloning repository______________________________________________________________________________
{
git clone (url:https//) (name)--------this command is used to clone all history and files

}

###viewing and changing commits____________________________________________________________________
{
1.git log------this command is used to view all commits
2.git log -p -------this command is used to view all the commits with the differences 
           -------that means it shows all the changes that have been made
3.git log -p -2 --------it shows only 2 commit differences
4.git log --stat --------this show all the commit stats in short like how many lines added /deleted / etc
5.git log --pretty=oneline--------this command shows all the commit in one line
6.git log --pretty=short-------this command shows all the commit in short
7.git log --pretty=full--------this command shows a littlbe bit more information than short
8.git log --since=2.days/months/years--------this comands shows all the commit since given input
9.git log --pretty=format:"%h--%an"-----------this commands shows all the hash with authors name
10.git commit --amend-----this is used to change commit
                  ------when next window get opens first press i and then make changes and 
                  -------for closing type press esc shift + semicolon(:) and type wq
11.(esc colon wq)__________for closing
}


###unstaging file_______________________________________________________________________________
{ 1.git restore --staged (filename) ------this command is used to unstage file
2.git checkout -- (filename)-----------this command help us to bring prievious commit
                            ------------if accidently code get removed we can bring back by using this command
3.git checkout -f   --------- this command changes my current working dir to previous commit dir 

}

##note:github pull is to bring all the code remote repository (i.e github)to our computer_________________________________
##github push is to put all our code to the remote repository (i.e github) _____________________________________



#####git remote:{____________________________________________________________________________________

1.git remote -v--------This command lists all the remote repositories associated with your local repository, along with their URLs  

In Git, a "remote" refers to a version of your repository that is hosted on a server, typically on a platform like GitHub, GitLab, or Bitbucket. It serves as a centralized repository that allows multiple developers to collaborate on a project.

When you clone a repository from a remote server, Git automatically creates a remote called "origin," which points to the repository you cloned from. You can also add additional remotes if you want to pull changes from or push changes to other repositories.
}


########generating ssh key{________________________________________________

Check for existing SSH keys: Before you generate a new SSH key, you can check to see if you have any existing SSH keys. Open a terminal or command prompt and run:

ls -al ~/.ssh---------
This command will list all files in the ~/.ssh directory. If you see files named id_rsa.pub or id_dsa.pub, you already have SSH keys. You can skip the next step and proceed to

Generate a new SSH key: If you don't have existing SSH keys or want to generate a new one, run the following command:


ssh-keygen -t ed25519 -C "your_email@example.com"-------------
Replace "your_email@example.com" with your email address. Press Enter to accept the default file location and optionally enter a passphrase for extra security.

Start the SSH agent: If the SSH agent isn't already running, you can start it using the following command:

eval "$(ssh-agent -s)"--------------
Add your SSH private key to the SSH agent: Use the following command to add your SSH private key to the SSH agent:

ssh-add ~/.ssh/id_ed25519------------
Replace id_ed25519 with the filename of your private key if it's different.

Copy the SSH public key: You need to copy the SSH public key to your clipboard. You can use the following command to print the SSH public key:

cat ~/.ssh/id_ed25519.pub-----------
Add SSH key to GitHub: Log in to your GitHub account, go to Settings > SSH and GPG keys, and click on New SSH key. Paste your SSH public key into the "Key" field and give it a descriptive title. Finally, click on Add SSH key.
}

###### alias in git_________________________________________________________________________________________________

git config --global alias.(shortcut_name) 'shortcut for what'------------------this command creates a shortcut

In Git, an alias is a custom shortcut or shorthand for a longer Git command. You can define aliases to make commonly used Git commands shorter and easier to remember. Aliases can be configured globally for your user or scoped to a specific Git repository.

For example, instead of typing git status every time you want to check the status of your repository, you could create an alias called st that accomplishes the same thing. Then, you would only need to type git st to see the status.


######branches and master in git_____________________________________________________
Imagine you're building a house (your project), and you start with the main blueprint (the master branch). Now, let's say you want to try out a new design for the kitchen without messing up the original plan. You create a copy of the main blueprint and call it something like "kitchen-design" (this is your new branch).

1.git checkout -b (name)---------this command is used to create a new branch
2.git checkout master ------------this command takes user in master branch
3.git checkout (createdbranch_name)-------------this command takes us back to our created branch
4.git branch ---------------this command help us to view all the branches

##### merging branch with master______________________________________________________________
git merge (branch_name)-------this command is used to merge master with branch  
                        -------after merging add to stage and commit
git branch -v -------------this will show me all my branches and master last commit
git branch --merged---------this command shows all the branches that has been merged with master
git branch --no-merged ---------this will show all the branches that has not been merged with master
git branch -d 'branch_name'------this will delete the unmerged branch with capital D

##########pushing git branches to the remote repository_____________________________________________________________________

1.git remote -v--------This command lists all the remote repositories associated with your local repository, along with their URLs
2.git push origin (name_of_branch)---------this will push the branch to the remote repository note:before pushing we should be on a branch not in master
3.git push -u origin master-----------------------------------------------------{

git push: It's like sending your changes to a shared place.
-u: It's like telling Git, "Remember this connection for next time."
origin: It's just the name of the shared place where you're sending your changes. (Usually, it's where you got the code from originally.)
master: It's the name of your main set of changes. You're saying, "Send my main set of changes to the shared place."
So, altogether:

You're sending your main set of changes to the shared place you got the code from, and you're telling Git to remember this connection for next time.

}
###deleting remote branches _________________________________________________________
git push -d origin (branch_name)------this command is used to delete the remote branch


###forking and cloning____________________________________________________________________
Forking:
Forking is a GitHub-specific action that creates a copy of a repository under your own GitHub account.
When you fork a repository on GitHub, you create a separate copy of the repository that you can modify independently.
Forking is often used when you want to contribute to a project hosted on GitHub but don't have write access to the original repository. It allows you to make changes to your fork and then submit pull requests to the original repository to propose your changes.

Cloning:
Cloning is a Git action that creates a copy of a repository on your local machine.
When you clone a repository, you create a local copy of the entire repository, including all files, commit history, branches, and other data.
Cloning is commonly used when you want to work with a repository locally, make changes, and push those changes back to the remote repository.
You can clone any Git repository, whether it's hosted on GitHub or elsewhere.


######pull request___________________________________________________________________________

Here's a step-by-step guide on how to create a pull request:

1.Fork the Repository: If you're contributing to a project on GitHub that you don't have write access to, you need to fork the repository first. This creates a copy of the repository under your GitHub account. You can do this by clicking the "Fork" button on the repository's GitHub page.

2.Clone the Forked Repository: Once you've forked the repository, you need to clone your forked copy to your local machine using the git clone command:

3.git clone <forked-repository-url>
Create a New Branch: Before making changes, create a new branch for your work. You can do this using the git checkout command:

4.git checkout -b <new-branch-name>
Make Changes: Make the necessary changes to the codebase in your new branch using your preferred text editor or IDE.

5.Stage and Commit Changes: Once you've made your changes, stage them for commit using git add, and then commit them with a descriptive commit message using git commit:

6.git add .
git commit -m "Your descriptive commit message here"
Push Changes to Your Fork: Push your changes to your forked repository on GitHub using the git push command:

7.git push origin <new-branch-name>
Open a Pull Request: Go to your forked repository on GitHub and navigate to the branch you just pushed. You'll see a "New pull request" button. Click it.

8.Compare Changes: GitHub will present you with a page where you can review the changes you've made. Make sure everything looks correct.

9.Create the Pull Request: Once you're happy with your changes, click the "Create pull request" button. Give your pull request a descriptive title and description explaining what changes you've made and why they're necessary.

10.Wait for Review and Merge: Your pull request is now open for review by the project maintainers. They'll review your changes, provide feedback if needed, and ultimately merge your changes into the main project branch if everything looks good.

That's it! You've successfully created a pull request. Now, it's time to wait for feedback and collaborate with the project maintainers to get your changes merged.
                          
